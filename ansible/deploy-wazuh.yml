---
- name: Deploy Wazuh to Docker Swarm
  hosts: swarm_manager
  become: yes
  vars_files:
    - group_vars/all.yml
  pre_tasks:
    - name: Install required packages
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
          - docker.io
          - python3-pip
          - python3-docker
          - certbot
          - python3-certbot-nginx
      register: apt_result
      changed_when: apt_result.changed

  tasks:
    - name: Initialize Docker Swarm
      command: docker swarm init --advertise-addr {{ public_ip }}
      register: swarm_init
      failed_when: swarm_init.rc != 0 and 'already part of a swarm' not in swarm_init.stderr
      changed_when: swarm_init.rc == 0

    - name: Create overlay network
      command: docker network create --driver overlay --attachable {{ overlay_network }}
      register: network_create
      failed_when: network_create.rc != 0 and 'already exists' not in network_create.stderr
      changed_when: network_create.rc == 0

    - name: Create Wazuh configuration directory
      file:
        path: /etc/wazuh
        state: directory
        mode: '0755'
        owner: '1000'
        group: '1000'
      register: config_dir
      changed_when: config_dir.changed

    - name: Create Wazuh certificates directory
      file:
        path: /etc/wazuh/certs
        state: directory
        mode: '0700'
        owner: '1000'
        group: '1000'
      register: certs_dir
      changed_when: certs_dir.changed

    - name: Create certbot webroot directory
      file:
        path: /var/www/certbot
        state: directory
        mode: '0755'
        owner: www-data
        group: www-data
      register: certbot_dir
      changed_when: certbot_dir.changed

    - name: Fetch Wazuh API secrets from Vault
      shell: |
        vault kv get -field=wazuh_api_username secret/wazuh > /tmp/wazuh_api_username
        vault kv get -field=wazuh_api_password secret/wazuh > /tmp/wazuh_api_password
      environment:
        VAULT_TOKEN: "{{ lookup('env', 'VAULT_TOKEN') }}"
        VAULT_ADDR: "http://127.0.0.1:8200"
      changed_when: true

    - name: Generate wazuh.yml with secrets
      copy:
        src: /home/ubuntu/cires-soc-challenge/configs/wazuh_dashboard/wazuh.yml
        dest: /etc/wazuh/wazuh.yml
        mode: '0644'
        owner: '1000'
        group: '1000'
      changed_when: true

    - name: Copy configuration files
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        mode: "{{ item.mode | default('0600') }}"
        owner: "{{ 'root' if 'filebeat.yml' in item.dest else '1000' }}"
        group: "{{ 'root' if 'filebeat.yml' in item.dest else '1000' }}"
      loop: "{{ config_files | select('match', '^((?!wazuh\\.yml).)*$') | list }}"
      register: config_copy
      changed_when: config_copy.changed

    - name: Copy SSL certificates
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        mode: '0600'
        owner: '1000'
        group: '1000'
      loop: "{{ ssl_certs }}"
      register: certs_copy
      changed_when: certs_copy.changed

    - name: Check if Let's Encrypt certificates exist
      stat:
        path: /etc/letsencrypt/live/{{ domain }}/fullchain.pem
      register: cert_stat

    - name: Stop nginx service if running
      systemd:
        name: nginx
        state: stopped
      ignore_errors: true

    - name: Setup Let's Encrypt for domain if no certificates exist
      command: certbot certonly --standalone -d {{ domain }} --email {{ certbot_email }} --non-interactive --agree-tos
      when: not cert_stat.stat.exists
      register: certbot_result
      failed_when: certbot_result.rc != 0 and 'Certificate already exists' not in certbot_result.stderr
      changed_when: certbot_result.rc == 0

    - name: Verify certificate files exist and are readable
      stat:
        path: "{{ item }}"
      register: cert_files
      loop:
        - /etc/letsencrypt/live/{{ domain }}/fullchain.pem
        - /etc/letsencrypt/live/{{ domain }}/privkey.pem

    - name: Fail if certificate files are missing
      ansible.builtin.fail:
        msg: "Certificate file {{ item.item }} does not exist or is not readable"
      when: not item.stat.exists
      loop: "{{ cert_files.results }}"
      loop_control:
        label: "{{ item.item }}"

    - name: Set proper ownership for Let's Encrypt certificates
      file:
        path: "{{ item.path }}"
        owner: www-data
        group: www-data
        mode: "{{ item.mode }}"
      loop:
        - { path: "/etc/letsencrypt/live/{{ domain }}/fullchain.pem", mode: '0644' }
        - { path: "/etc/letsencrypt/archive/{{ domain }}/fullchain1.pem", mode: '0644' }
        - { path: "/etc/letsencrypt/live/{{ domain }}/privkey.pem", mode: '0600' }
        - { path: "/etc/letsencrypt/archive/{{ domain }}/privkey1.pem", mode: '0600' }
      when: cert_files.results | selectattr('stat.exists', 'equalto', true) | length > 0
      register: cert_ownership
      changed_when: cert_ownership.changed

    - name: Ensure /tmp has correct permissions
      file:
        path: /tmp
        state: directory
        mode: '1777'
        owner: root
        group: root
      register: tmp_perms
      changed_when: tmp_perms.changed

    - name: Create Docker secrets from Vault
      shell: |
        vault kv get -field={{ item.field }} secret/wazuh | docker secret create {{ item.name }} -
      loop:
        - { name: wazuh_api_username, field: wazuh_api_username }
        - { name: wazuh_api_password, field: wazuh_api_password }
        - { name: indexer_username, field: indexer_username }
        - { name: indexer_password, field: indexer_password }
        - { name: dashboard_username, field: dashboard_username }
        - { name: dashboard_password, field: dashboard_password }
        - { name: filebeat_username, field: filebeat_username }
        - { name: filebeat_password, field: filebeat_password }
      environment:
        VAULT_TOKEN: "{{ lookup('env', 'VAULT_TOKEN') }}"
        VAULT_ADDR: "http://127.0.0.1:8200"
      register: secret_create
      changed_when: secret_create.rc == 0
      ignore_errors: true

    - name: Remove any existing Wazuh stack
      command: docker stack rm {{ stack_name }}
      ignore_errors: true
      changed_when: true

    - name: Wait for stack removal to complete
      pause:
        seconds: 30

    - name: Backup existing stack configuration
      copy:
        src: /etc/wazuh/wazuh-stack.yml
        dest: /etc/wazuh/wazuh-stack.yml.bak
        remote_src: yes
        mode: '0644'
      ignore_errors: true
      register: backup_config

    - name: Deploy Wazuh stack to Docker Swarm
      command: docker stack deploy -c /etc/wazuh/wazuh-stack.yml {{ stack_name }}
      register: stack_deploy
      changed_when: stack_deploy.rc == 0
      failed_when: stack_deploy.rc != 0

    - name: Roll back stack on failure
      command: docker stack deploy -c /etc/wazuh/wazuh-stack.yml.bak {{ stack_name }}
      when: stack_deploy.rc != 0 and backup_config is success
      ignore_errors: true

    - name: Wait for services to start
      pause:
        seconds: 120

    - name: Check stack deployment status
      command: docker stack ps {{ stack_name }} --no-trunc
      register: stack_status
      changed_when: false

    - name: Display stack status
      debug:
        msg: "{{ stack_status.stdout_lines }}"

    - name: Verify indexer connectivity
      shell: docker exec $(docker ps -q -f name=wazuh_wazuh-master) curl -s -k -u {{ indexer_username }}:{{ indexer_password }} https://wazuh1-indexer:9200
      register: indexer_check
      until: indexer_check.rc == 0
      retries: 10
      delay: 30
      ignore_errors: true

    - name: Initialize Wazuh index patterns
      shell: docker exec $(docker ps -q -f name=wazuh_wazuh-master) filebeat setup --index-management -E setup.ilm.enabled=false
      register: filebeat_setup
      changed_when: filebeat_setup.rc == 0
      ignore_errors: true

    - name: Setup Certbot renewal cron
      cron:
        name: "Renew Let's Encrypt certificates"
        job: "certbot renew --quiet --deploy-hook 'docker service update --force {{ stack_name }}_nginx'"
        minute: "0"
        hour: "0,12"
        day: "*"
        month: "*"
        weekday: "*"
      register: certbot_cron
      changed_when: certbot_cron.changed

  post_tasks:
    - name: Wait for Wazuh dashboard to be ready
      uri:
        url: https://{{ domain }}
        method: GET
        validate_certs: no
        timeout: 30
      register: dashboard_check
      until: dashboard_check.status == 200 or dashboard_check.status == 302
      retries: 20
      delay: 30
      ignore_errors: true

    - name: Display final status
      debug:
        msg: |
          Wazuh deployment completed!

          Access URLs:
          - Wazuh Dashboard: https://{{ domain }}
          - Wazuh API: https://{{ domain }}:55000

          Service Status: {{ 'Ready' if dashboard_check.status in [200, 302] else 'Starting (may take a few more minutes)' }}

          To check logs: docker service logs {{ stack_name }}_nginx
          To check status: docker stack ps {{ stack_name }}
