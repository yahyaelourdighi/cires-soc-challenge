---
- name: Deploy Wazuh to Docker Swarm
  hosts: swarm_manager
  become: yes
  vars:
    domain: "cires-wazuh-yahya.work.gd"
    public_ip: "52.0.98.231"
    wazuh_version: "4.12.0"
    stack_name: "wazuh"
    overlay_network: "wazuh_net"
    certbot_email: "yahyaelourdighi.cyber@gmail.com"
    project_root: "/home/ubuntu/cires-soc-challenge"

  pre_tasks:
    - name: Install required packages
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
          - docker.io
          - python3-pip
          - certbot
          - python3-certbot-nginx

  tasks:
    - name: Initialize Docker Swarm
      command: docker swarm init --advertise-addr {{ public_ip }}
      register: swarm_init
      failed_when: swarm_init.rc != 0 and 'already part of a swarm' not in swarm_init.stderr
      changed_when: swarm_init.rc == 0

    - name: Create overlay network
      command: docker network create --driver overlay --attachable {{ overlay_network }}
      register: network_create
      failed_when: network_create.rc != 0 and 'already exists' not in network_create.stderr
      changed_when: network_create.rc == 0

    - name: Create Wazuh configuration directory
      file:
        path: /etc/wazuh
        state: directory
        mode: '0755'
        owner: '1000'
        group: '1000'

    - name: Create Wazuh certificates directory
      file:
        path: /etc/wazuh/certs
        state: directory
        mode: '0700'
        owner: '1000'
        group: '1000'

    - name: Create certbot webroot directory
      file:
        path: /var/www/certbot
        state: directory
        mode: '0755'
        owner: www-data
        group: www-data

    - name: Copy configuration files
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        mode: "{{ item.mode | default('0600') }}"
        owner: '1000'
        group: '1000'
      loop:
        - { src: "{{ project_root }}/configs/nginx.conf", dest: "/etc/nginx/nginx.conf" }
        - { src: "{{ project_root }}/configs/wazuh_cluster/wazuh_manager.conf", dest: "/etc/wazuh/wazuh_manager.conf" }
        - { src: "{{ project_root }}/configs/wazuh_cluster/wazuh_worker.conf", dest: "/etc/wazuh/wazuh_worker.conf" }
        - { src: "{{ project_root }}/configs/wazuh_dashboard/opensearch_dashboards.yml", dest: "/etc/wazuh/opensearch_dashboards.yml" }
        - { src: "{{ project_root }}/configs/wazuh_dashboard/wazuh.yml", dest: "/etc/wazuh/wazuh.yml" }
        - { src: "{{ project_root }}/configs/wazuh_indexer/wazuh1_indexer.yml", dest: "/etc/wazuh/wazuh1_indexer.yml" }
        - { src: "{{ project_root }}/configs/wazuh_indexer/wazuh2_indexer.yml", dest: "/etc/wazuh/wazuh2_indexer.yml" }
        - { src: "{{ project_root }}/configs/wazuh_indexer/wazuh3_indexer.yml", dest: "/etc/wazuh/wazuh3_indexer.yml" }
        - { src: "{{ project_root }}/configs/wazuh_indexer/internal_users.yml", dest: "/etc/wazuh/internal_users.yml" }
        - { src: "{{ project_root }}/stack/wazuh-stack.yml", dest: "/etc/wazuh/wazuh-stack.yml", mode: '0644' }
        - { src: "{{ project_root }}/configs/filebeat.yml", dest: "/etc/wazuh/filebeat.yml", mode: '0644' }

    - name: Copy SSL certificates
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        mode: '0600'
        owner: '1000'
        group: '1000'
      loop:
        - { src: "{{ project_root }}/configs/wazuh_indexer_ssl_certs/root-ca.pem", dest: "/etc/wazuh/certs/root-ca.pem" }
        - { src: "{{ project_root }}/configs/wazuh_indexer_ssl_certs/wazuh1-indexer.pem", dest: "/etc/wazuh/certs/wazuh1-indexer.pem" }
        - { src: "{{ project_root }}/configs/wazuh_indexer_ssl_certs/wazuh1-indexer-key.pem", dest: "/etc/wazuh/certs/wazuh1-indexer-key.pem" }
        - { src: "{{ project_root }}/configs/wazuh_indexer_ssl_certs/wazuh2-indexer.pem", dest: "/etc/wazuh/certs/wazuh2-indexer.pem" }
        - { src: "{{ project_root }}/configs/wazuh_indexer_ssl_certs/wazuh2-indexer-key.pem", dest: "/etc/wazuh/certs/wazuh2-indexer-key.pem" }
        - { src: "{{ project_root }}/configs/wazuh_indexer_ssl_certs/wazuh3-indexer.pem", dest: "/etc/wazuh/certs/wazuh3-indexer.pem" }
        - { src: "{{ project_root }}/configs/wazuh_indexer_ssl_certs/wazuh3-indexer-key.pem", dest: "/etc/wazuh/certs/wazuh3-indexer-key.pem" }
        - { src: "{{ project_root }}/configs/wazuh_indexer_ssl_certs/wazuh.dashboard.pem", dest: "/etc/wazuh/certs/wazuh.dashboard.pem" }
        - { src: "{{ project_root }}/configs/wazuh_indexer_ssl_certs/wazuh.dashboard-key.pem", dest: "/etc/wazuh/certs/wazuh.dashboard-key.pem" }
        - { src: "{{ project_root }}/configs/wazuh_indexer_ssl_certs/wazuh.master.pem", dest: "/etc/wazuh/certs/wazuh.master.pem" }
        - { src: "{{ project_root }}/configs/wazuh_indexer_ssl_certs/wazuh.master-key.pem", dest: "/etc/wazuh/certs/wazuh.master-key.pem" }
        - { src: "{{ project_root }}/configs/wazuh_indexer_ssl_certs/wazuh.worker.pem", dest: "/etc/wazuh/certs/wazuh.worker.pem" }
        - { src: "{{ project_root }}/configs/wazuh_indexer_ssl_certs/wazuh.worker-key.pem", dest: "/etc/wazuh/certs/wazuh.worker-key.pem" }
        - { src: "{{ project_root }}/configs/wazuh_indexer_ssl_certs/admin.pem", dest: "/etc/wazuh/certs/admin.pem" }
        - { src: "{{ project_root }}/configs/wazuh_indexer_ssl_certs/admin-key.pem", dest: "/etc/wazuh/certs/admin-key.pem" }

    - name: Check if Let's Encrypt certificates exist
      stat:
        path: /etc/letsencrypt/live/{{ domain }}/fullchain.pem
      register: cert_stat

    - name: Stop nginx service if running
      systemd:
        name: nginx
        state: stopped
      ignore_errors: true

    - name: Setup Let's Encrypt for domain if no certificates exist
      command: certbot certonly --standalone -d {{ domain }} --email {{ certbot_email }} --non-interactive --agree-tos
      when: not cert_stat.stat.exists
      register: certbot_result
      failed_when: certbot_result.rc != 0 and 'Certificate already exists' not in certbot_result.stderr
      changed_when: certbot_result.rc == 0

    - name: Verify certificate files exist and are readable
      stat:
        path: "{{ item }}"
      register: cert_files
      loop:
        - /etc/letsencrypt/live/{{ domain }}/fullchain.pem
        - /etc/letsencrypt/live/{{ domain }}/privkey.pem

    - name: Fail if certificate files are missing
      ansible.builtin.fail:
        msg: "Certificate file {{ item.item }} does not exist or is not readable"
      when: not item.stat.exists
      loop: "{{ cert_files.results }}"
      loop_control:
        label: "{{ item.item }}"

    - name: Set proper ownership for Let's Encrypt certificates
      file:
        path: "{{ item.path }}"
        owner: www-data
        group: www-data
        mode: "{{ item.mode }}"
      loop:
        - { path: "/etc/letsencrypt/live/{{ domain }}/fullchain.pem", mode: '0644' }
        - { path: "/etc/letsencrypt/archive/{{ domain }}/fullchain1.pem", mode: '0644' }
        - { path: "/etc/letsencrypt/live/{{ domain }}/privkey.pem", mode: '0600' }
        - { path: "/etc/letsencrypt/archive/{{ domain }}/privkey1.pem", mode: '0600' }
      when: cert_files.results | selectattr('stat.exists', 'equalto', true) | length > 0

    - name: Ensure /tmp has correct permissions
      file:
        path: /tmp
        state: directory
        mode: '1777'
        owner: root
        group: root

    - name: Remove any existing Wazuh stack
      command: docker stack rm {{ stack_name }}
      ignore_errors: true
      changed_when: true

    - name: Wait for stack removal to complete
      pause:
        seconds: 30

    - name: Deploy Wazuh stack to Docker Swarm
      command: docker stack deploy -c /etc/wazuh/wazuh-stack.yml {{ stack_name }}
      changed_when: true

    - name: Wait for services to start
      pause:
        seconds: 60

    - name: Check stack deployment status
      command: docker stack ps {{ stack_name }} --no-trunc
      register: stack_status
      changed_when: false

    - name: Display stack status
      debug:
        msg: "{{ stack_status.stdout_lines }}"

    - name: Setup Certbot renewal cron
      cron:
        name: "Renew Let's Encrypt certificates"
        job: "certbot renew --quiet --deploy-hook 'docker service update --force {{ stack_name }}_nginx'"
        minute: "0"
        hour: "0,12"
        day: "*"
        month: "*"
        weekday: "*"
      changed_when: true

  post_tasks:
    - name: Wait for Wazuh dashboard to be ready
      uri:
        url: https://{{ domain }}
        method: GET
        validate_certs: no
        timeout: 10
      register: dashboard_check
      until: dashboard_check.status == 200 or dashboard_check.status == 302
      retries: 60
      delay: 15
      ignore_errors: true

    - name: Display final status
      debug:
        msg: |
          Wazuh deployment completed!

          Access URLs:
          - Wazuh Dashboard: https://{{ domain }}
          - Wazuh API: https://{{ domain }}:55000

          Service Status: {{ 'Ready' if dashboard_check.status in [200, 302] else 'Starting (may take a few more minutes)' }}

          To check logs: docker service logs {{ stack_name }}_nginx
          To check status: docker stack ps {{ stack_name }}
